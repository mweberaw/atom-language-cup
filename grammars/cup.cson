# If this is your first time writing a language grammar, check out:
#   - http://manual.macromates.com/en/language_grammars

'scopeName': 'source.cup'
'name': 'CUP'
'fileTypes': [
  'cup'
]
'patterns': [
  {
    'include': '#comments'
  }
  {
    'include': '#package_spec'
  }
  {
    'include': '#import_spec'
  }
  {
    'include': '#class_name'
  }
  {
    'include': '#action_code_part'
  }
  {
    'include': '#parser_code_part'
  }
  {
    'include': '#init_with_part'
  }
  {
    'include': '#scan_with_part'
  }
  {
    'include': '#symbols'
  }
  {
    'include': '#rules'
  }
  {
    'include': '#precedences'
  }
  {
    'include': '#start_with'
  }
]
'repository':
  'comments':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.java'
        'match': '/\\*\\*/'
        'name': 'comment.block.empty.java'
      }
      {
        'include': '#comments-inline'
      }
    ]
  'comments-inline':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.cup'
        'end': '\\*/'
        'name': 'comment.block.cup'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.cup'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.cup'
            'end': '\\n'
            'name': 'comment.line.double-slash.cup'
          }
        ]
      }
    ]
  'package_spec':
    'patterns': [
      {
        'begin': '\\b(package)\\b\\s*'
        'beginCaptures':
          '1':
            'name': 'keyword.other.package.java'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.java'
        'name': 'meta.package.java'
        'contentName': 'storage.modifier.package.java'
      }
    ]
  'import_spec':
    'patterns': [
      {
        'begin': '\\b(import)\\b\\s*\\b(static)?\\b\\s'
        'beginCaptures':
          '1':
            'name': 'keyword.other.import.java'
          '2':
            'name': 'storage.modifier.java'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.java'
        'name': 'meta.import.java'
        'contentName': 'storage.modifier.import.java'
      }
    ]
  'class_name':
    'patterns': [
      {
        'begin': '\\b(class)\\b\\s*'
        'beginCaptures':
          '1':
            'name': 'keyword.other.class.java'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.java'
        'name': 'meta.class.java'
      }
    ]
  'action_code_part':
    'patterns': [
      {
        'begin': '\\b(action)\\b\\s*\\b(code)\\b\\s*({:)'
        'beginCaptures':
          '1':
            'name': 'keyword.other.action.cup'
          '2':
            'name': 'keyword.other.code.cup'
          '3':
            'name': 'punctuation.section.code.begin.cup'
        'end': '(:})(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.section.code.end.cup'
          '2':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': 'source.java#code'
          }
        ]
      }
    ]
  'parser_code_part':
    'patterns': [
      {
        'begin': '\\b(parser)\\b\\s*\\b(code)\\b\\s*({:)'
        'beginCaptures':
          '1':
            'name': 'keyword.other.parser.cup'
          '2':
            'name': 'keyword.other.code.cup'
          '3':
            'name': 'punctuation.section.code.begin.cup'
        'end': '(:})(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.section.code.end.cup'
          '2':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': 'source.java#code'
          }
        ]
      }
    ]
  'init_with_part':
    'patterns': [
      {
        'begin': '\\b(init)\\b\\s*\\b(with)\\b\\s*({:)'
        'beginCaptures':
          '1':
            'name': 'keyword.other.init.cup'
          '2':
            'name': 'keyword.other.with.cup'
          '3':
            'name': 'punctuation.section.code.begin.cup'
        'end': '(:})(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.section.code.end.cup'
          '2':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': 'source.java#code'
          }
        ]
      }
    ]
  'scan_with_part':
    'patterns': [
      {
        'begin': '\\b(scan)\\b\\s*\\b(with)\\b\\s*({:)'
        'beginCaptures':
          '1':
            'name': 'keyword.other.scan.cup'
          '2':
            'name': 'keyword.other.with.cup'
          '3':
            'name': 'punctuation.section.code.begin.cup'
        'end': '(:})(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.section.code.end.cup'
          '2':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': 'source.java#code'
          }
        ]
      }
    ]
  'symbols':
    'patterns': [
      {
        'begin': '\\b(terminal)\\b\\s*(\\b(\\w+)\\b(?=\\s*\\w+))?'
        'beginCaptures':
          '1':
            'name': 'keyword.other.terminal.cup'
          '2':
            'name': 'entity.name.type.class.java'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#match_symbol'
          }
        ]
      }
      {
        'begin': '\\b(non)\\b\\s*\\b(terminal)\\b\\s*(\\w+)?'
        'beginCaptures':
          '1':
            'name': 'keyword.other.terminal.cup'
          '2':
            'name': 'keyword.other.terminal.cup'
          '3':
            'name': 'entity.name.type.class.java'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#match_symbol'
          }
        ]
      }
    ]
  'rules':
    'patterns': [
      {
        'begin': '(\\w+)\\s*(::=)'
        'beginCaptures':
          '1':
            'name': 'entity.name.symbol.cup'
          '2':
            'name': 'keyword.operator.rule.cup'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.cup'
        'patterns': [
          {
            'include': '#rule_match'
          }
          {
            'include': '#prec_def'
          }
          {
            'include': '#rule_separator'
          }
          {
            'include': '#code_block'
          }
          {
            'include': '#match_symbol'
          }
          {
            'include': '#comments'
          }
        ]
      }
    ]
  'rule_match':
    'patterns': [
      {
        'match': '(\\w+)\\s*(:)\\s*(\\w+)'
        'captures':
          '1':
            'name': 'entity.name.symbol.cup'
          '2':
            'name': 'keyword.operator.match.cup'
          '3':
            'name': 'meta.definition.variable.cup'
      }
    ]
  'match_symbol':
    'patterns': [
      {
        'match': '\\b(\\w+)\\b'
        'name': 'entity.name.symbol.cup'
      }
    ]
  'rule_separator':
    'patterns': [
      {
        'match': '(\\|)'
        'name': 'keyword.operator.rule.reparator.cup'
      }
    ]
  'code_block':
    'patterns': [
      {
        'begin': '({:)'
        'end': '(:})'
        'patterns': [
          {
            'include': 'source.java#code'
          }
        ]
      }
    ]
  'precedences':
    'patterns': [
      {
        'begin': '\\b(precedence)\\b\\s*\\b(left|right|nonassoc)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.other.precedence.cup'
          '2':
            'name': 'keyword.other.direction.cup'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.cup'
      }
    ]
  'start_with':
    'patterns': [
      {
        'begin': '\\b(start)\\b\\s*\\b(with)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.other.start.cup'
          '2':
            'name': 'keyword.other.with.cup'
        'end': '\\s*(;)'
        'endCaptures':
          '1':
            'name': 'punctuation.terminator.cup'
      }
    ]
  'prec_def':
    'patterns': [
      {
        'match': '(\\%prec)\\b\\s*(\\w+)'
        'captures':
          '1':
            'name': 'keyword.other.prec.assign.cup'
          '2':
            'name': 'entity.name.symbol.cup'
      }
    ]
